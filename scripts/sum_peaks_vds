#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Generate "peak powder" from CrystFEL stream
#
# Copyright Â© 2017-2020 Deutsches Elektronen-Synchrotron DESY,
#                       a research centre of the Helmholtz Association.
#
# Author:
#    2017 Alexandra Tolstikova <alexandra.tolstikova@desy.de>
#    2024 Ana Carolina Rodrigues <ana.rodrigues@desy.de>

import sys
import numpy as np
import h5py
from os.path import basename, splitext

PixelResolution = 1 / (75 * 1e-3)

reading_geometry = False
reading_chunks = False
reading_peaks = False
max_fs = -100500
max_ss = -100500
is_a_hit = False
is_centered = False
is_refined = False
count_hits=0
count_centered=0
count_refined=0

if sys.argv[1] == '-':
    stream = sys.stdin
else:
    stream = open(sys.argv[1], 'r')

for count, line in enumerate(stream):
    if reading_chunks:
        if line.startswith('End of peak list'):
            reading_peaks = False
            if is_a_hit:
                count_hits+=1
            if is_centered:
                count_centered+=1    
            if is_refined:
                count_refined+=1            
        elif line.startswith('  fs/px   ss/px (1/d)/nm^-1   Intensity  Panel'):
            reading_peaks = True
        elif reading_peaks and is_a_hit and is_centered:
            fs, ss, dump, intensity = [float(i) for i in line.split()[:4]]
            panel_number = int(line.split()[4].split("p")[-1].split("a")[0])-1
            powder[0, panel_number, int(np.round(ss)), int(np.round(fs))] += 1e0*intensity
        elif line.split(': ')[0]=='Image filename':
            file_name=line.split(': ')[-1][:-1]
        elif line.split(': ')[0]=='Event':
            event=int(line.split(': //')[-1])
        elif line.startswith("hit = 1"):
            is_a_hit = True
        elif line.startswith("hit = 0"):
            is_a_hit = False
        elif line.split(' = ')[0]=="header/int//entry_1/instrument_1/pre_centering_flag":
            is_centered = int(line.split(' = ')[-1])
        elif line.split(' = ')[0]=="header/int//entry_1/instrument_1/refined_center_flag":
            is_refined = int(line.split(' = ')[-1])
    elif line.startswith('----- End geometry file -----'):
        reading_geometry = False
        powder = np.zeros((1,8,max_ss+1,max_fs+1), np.float32)
    elif reading_geometry:
        try:
            par, val = line.split('=')
            if par.split('/')[-1].strip() == 'max_fs' and int(val) > max_fs:
                max_fs = int(val)
            elif par.split('/')[-1].strip() == 'max_ss' and int(val) > max_ss:
                max_ss = int(val)
        except ValueError:
            pass
    elif line.startswith('----- Begin geometry file -----'):
        reading_geometry = True
    elif line.startswith('----- Begin chunk -----'):
        reading_chunks = True

print(f"--- Finished reading stream --- \n Number of hits: {count_hits} \n Number of centered frames: {count_centered} \n Number of frames with refined center: {count_refined} ")

powder/=1e2
f = h5py.File(splitext(basename(sys.argv[1]))[0]+'-powder.h5', 'w')
f.create_dataset('/entry_1/instrument_1/detector_1/data', data=(powder[:,:,:max_ss+1,:max_fs+1]).astype(np.int32))
f.close()
